{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "datasource",
          "uid": "grafana"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 19,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "influxdb",
        "uid": "K647Ge0Mk"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 10,
      "options": {
        "content": "",
        "mode": "markdown"
      },
      "pluginVersion": "9.1.3",
      "title": "Server2",
      "type": "text"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "3I0W7vY7k"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "left",
            "displayMode": "color-background",
            "inspect": false
          },
          "decimals": 2,
          "mappings": [
            {
              "options": {
                "1": {
                  "color": "dark-green",
                  "index": 0,
                  "text": "NORMAL"
                },
                "2": {
                  "color": "yellow",
                  "index": 1,
                  "text": "The disk has system partitions but no data"
                },
                "3": {
                  "color": "yellow",
                  "index": 2,
                  "text": "The disk is not partitioned"
                },
                "4": {
                  "color": "dark-red",
                  "index": 3,
                  "text": "Partitions on the disk are damaged"
                },
                "5": {
                  "color": "dark-red",
                  "index": 4,
                  "text": "Damaged/Crashed"
                }
              },
              "type": "value"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "sort"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 11,
        "w": 4,
        "x": 0,
        "y": 1
      },
      "id": 14,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "frameIndex": 5,
        "showHeader": true
      },
      "pluginVersion": "9.1.3",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "3I0W7vY7k"
          },
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: -1m, stop: now())\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_disk\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"disk_status\")\r\n  |> filter(fn: (r) => r[\"disk_name\"] == \"Disk1\" or r[\"disk_name\"] == \"Disk1(DX517-1)\" or r[\"disk_name\"] == \"Disk2\" or r[\"disk_name\"] == \"Disk2(DX517-1)\" or r[\"disk_name\"] == \"Disk3\" or r[\"disk_name\"] == \"Disk3(DX517-1)\" or r[\"disk_name\"] == \"Disk4\" or r[\"disk_name\"] == \"Disk4(DX517-1)\" or r[\"disk_name\"] == \"Disk5(DX517-1)\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> last()\r\n  |> limit(n: 1)\r\n  |> group(columns: [\"_time\"], mode:\"by\")\r\n  |> drop(columns: [\"_start\", \"_time\", \"_stop\", \"_field\", \"_measurement\", \"nas_name\"])\r\n  |> rename(columns: {_value: \"Status\"}) \r\n  |> rename(columns: {disk_name: \"Disk\"}) ",
          "refId": "A"
        }
      ],
      "title": "Server 2 - Disk Status",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {
              "Disk": 0,
              "Status": 1
            },
            "renameByName": {}
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "3I0W7vY7k"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "left",
            "displayMode": "color-background",
            "inspect": false
          },
          "decimals": 2,
          "mappings": [
            {
              "options": {
                "1": {
                  "color": "dark-green",
                  "index": 0,
                  "text": "NORMAL"
                },
                "2": {
                  "color": "yellow",
                  "index": 1,
                  "text": "The disk has system partitions but no data"
                },
                "3": {
                  "color": "yellow",
                  "index": 2,
                  "text": "The disk is not partitioned"
                },
                "4": {
                  "color": "dark-red",
                  "index": 3,
                  "text": "Partitions on the disk are damaged"
                },
                "5": {
                  "color": "dark-red",
                  "index": 4,
                  "text": "Damaged/Crashed"
                },
                "6": {
                  "color": "dark-yellow",
                  "index": 5,
                  "text": "Creating"
                },
                "7": {
                  "color": "dark-yellow",
                  "index": 6,
                  "text": "RaidSyncing"
                },
                "8": {
                  "color": "dark-blue",
                  "index": 7,
                  "text": "RaidParityChecking"
                },
                "9": {
                  "color": "dark-yellow",
                  "index": 8,
                  "text": "RaidAssembling"
                },
                "10": {
                  "color": "dark-yellow",
                  "index": 9,
                  "text": "Canceling"
                },
                "11": {
                  "color": "dark-red",
                  "index": 10,
                  "text": "Degrade"
                },
                "12": {
                  "color": "dark-red",
                  "index": 11,
                  "text": "Crashed"
                },
                "13": {
                  "color": "dark-blue",
                  "index": 12,
                  "text": "DataScrubbing"
                },
                "14": {
                  "color": "dark-yellow",
                  "index": 13,
                  "text": "RaidDeploying"
                },
                "15": {
                  "color": "dark-yellow",
                  "index": 14,
                  "text": "RaidUnDeploying"
                },
                "16": {
                  "color": "dark-yellow",
                  "index": 15,
                  "text": "RaidMountCache"
                },
                "17": {
                  "color": "dark-yellow",
                  "index": 16,
                  "text": "RaidUnmountCache"
                },
                "18": {
                  "color": "dark-yellow",
                  "index": 17,
                  "text": "RaidExpandingUnfinishedSHR"
                },
                "19": {
                  "color": "dark-yellow",
                  "index": 18,
                  "text": "RaidConvertSHRToPool"
                },
                "20": {
                  "color": "dark-yellow",
                  "index": 19,
                  "text": "RaidMigrateSHR1ToSHR2"
                },
                "21": {
                  "color": "dark-red",
                  "index": 20,
                  "text": "RaidUnknownStatus"
                }
              },
              "type": "value"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "sort"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Status"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 176
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Volume Name"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 120
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 11,
        "w": 4,
        "x": 4,
        "y": 1
      },
      "id": 31,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "frameIndex": 5,
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "9.1.3",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "3I0W7vY7k"
          },
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: -1m, stop: now())\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_raid\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"raid_status\")\r\n  |> filter(fn: (r) => r[\"raid_name\"] == \"Volume1\" or r[\"raid_name\"] == \"Volume2\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> last()\r\n  |> limit(n: 1)\r\n  |> group(columns: [\"_time\"], mode:\"by\")\r\n  |> drop(columns: [\"_start\", \"_time\", \"_stop\", \"_field\", \"_measurement\", \"nas_name\"])\r\n  |> rename(columns: {_value: \"Status\"}) \r\n  |> rename(columns: {raid_name: \"Volume Name\"}) ",
          "refId": "A"
        }
      ],
      "title": "Server 2 - RAID Status",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {
              "Status": 1,
              "Volume Name": 0
            },
            "renameByName": {}
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "3I0W7vY7k"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "center",
            "displayMode": "auto",
            "inspect": false
          },
          "decimals": 3,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "bytes"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 8,
        "x": 8,
        "y": 1
      },
      "id": 5,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "9.1.3",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "3I0W7vY7k"
          },
          "query": "////////////////////////////////////////////////\r\n//TOTAL AVAILABLE SPACE ON THE DIFFERENT VOLUMES\r\n////////////////////////////////////////////////\r\nserver2_vol1_total=from(bucket: \"Test/autogen\")\r\n  |> range(start: -5m, stop: now())\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_volume\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"vol_totalsize\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> filter(fn: (r) => r[\"volume\"] == \"/volume1\")\r\n  |> last()\r\n  |> limit(n: 1)\r\n  |> rename(columns: {_value: \"total_size\"})\r\n\r\nserver2_vol2_total=from(bucket: \"Test/autogen\")\r\n  |> range(start: -5m, stop: now())\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_volume\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"vol_totalsize\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> filter(fn: (r) => r[\"volume\"] == \"/volume2\")\r\n  |> last()\r\n  |> limit(n: 1)\r\n  |> rename(columns: {_value: \"total_size\"})\r\n\r\n////////////////////////////////////////////////\r\n//USED SPACE ON THE DIFFERENT VOLUMES\r\n////////////////////////////////////////////////\r\n\r\nserver2_vol1_used=from(bucket: \"Test/autogen\")\r\n  |> range(start: -5m, stop: now())\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_volume\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"vol_used\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> filter(fn: (r) => r[\"volume\"] == \"/volume1\")\r\n  |> last()\r\n  |> limit(n: 1)\r\n  |> rename(columns: {_value: \"vol_used\"})\r\n\r\nserver2_vol2_used=from(bucket: \"Test/autogen\")\r\n  |> range(start: -5m, stop: now())\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_volume\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"vol_used\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> filter(fn: (r) => r[\"volume\"] == \"/volume2\")\r\n  |> last()\r\n  |> limit(n: 1)\r\n  |> rename(columns: {_value: \"vol_used\"})\r\n\r\n////////////////////////////////////////////////\r\n//COMBINE ALL TABLES INTO ONE TABLE\r\n////////////////////////////////////////////////\r\n\r\noverview = union(tables: [server2_vol1_total, server2_vol2_total,server2_vol1_used, server2_vol2_used])\r\n|> group(columns: [\"_time\"], mode:\"by\")\r\n|> fill(column: \"total_size\", value: 0.0)\r\n|> fill(column: \"vol_used\", value: 0.0)\r\n|> reduce(\r\n       fn: (r, accumulator) => ({\r\n          total_size: r.total_size + accumulator.total_size,\r\n          total_used: r.vol_used + accumulator.total_used\r\n         }),\r\n        identity: {total_size: 0.0, total_used: 0.0},\r\n    )\r\n|> map(fn: (r) => ({ r with _value: (r.total_size - r.total_used) }))\r\n|> drop(columns: [\"_time\"])\r\n|> rename(columns: {total_size: \"Total\"})\r\n|> rename(columns: {_value: \"Free\"})\r\n|> rename(columns: {total_used: \"Used\"})\r\n|> yield()\r\n",
          "refId": "A"
        }
      ],
      "title": "Server2 - All Volumes",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {
              "Free": 1,
              "Total": 0,
              "Used": 2
            },
            "renameByName": {}
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "3I0W7vY7k"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "center",
            "displayMode": "auto",
            "inspect": false
          },
          "decimals": 3,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "bytes"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Field"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 82
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 16,
        "y": 1
      },
      "id": 16,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "9.1.3",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "3I0W7vY7k"
          },
          "query": "server2_vol1_total=from(bucket: \"Test/autogen\")\r\n  |> range(start: -5m, stop: now())\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_raid\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"raid_total_size\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> filter(fn: (r) => r[\"raid_name\"] == \"Volume1\")\r\n  |> aggregateWindow(every: 1h, fn: last)\r\n  |> rename(columns: {_value: \"total_size\"})\r\n\r\nserver2_vol1_free=from(bucket: \"Test/autogen\")\r\n  |> range(start: -5m, stop: now())\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_raid\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"raid_free_size\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> filter(fn: (r) => r[\"raid_name\"] == \"Volume1\")\r\n  |> aggregateWindow(every: 1h, fn: last)\r\n  |> rename(columns: {_value: \"vol_free\"})\r\n\r\n////////////////////////////////////////////////\r\n//COMBINE ALL TABLES INTO ONE TABLE\r\n////////////////////////////////////////////////\r\n\r\noverview = union(tables: [server2_vol1_total, server2_vol1_free])\r\n|> group(columns: [\"_time\"], mode:\"by\")\r\n|> fill(column: \"total_size\", value: 0.0)\r\n|> fill(column: \"vol_free\", value: 0.0)\r\n|> reduce(\r\n       fn: (r, accumulator) => ({\r\n          total_size: r.total_size + accumulator.total_size,\r\n          vol_free: r.vol_free + accumulator.vol_free\r\n         }),\r\n        identity: {total_size: 0.0, vol_free: 0.0},\r\n    )\r\n|> map(fn: (r) => ({ r with _value: (r.total_size - r.vol_free) }))\r\n|> drop(columns: [\"_time\"])\r\n|> rename(columns: {_value: \"Used\"})\r\n|> rename(columns: {total_size: \"Total\"})\r\n|> rename(columns: {vol_free: \"Free\"})\r\n|> yield()\r\n",
          "refId": "A"
        }
      ],
      "title": "Server2 - Volume 1",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {
              "Free": 1,
              "Total": 0,
              "Used": 2
            },
            "renameByName": {}
          }
        },
        {
          "id": "reduce",
          "options": {
            "labelsToFields": false,
            "reducers": [
              "last"
            ]
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "3I0W7vY7k"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "center",
            "displayMode": "auto",
            "inspect": false
          },
          "decimals": 3,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "bytes"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Field"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 82
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 20,
        "y": 1
      },
      "id": 32,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "9.1.3",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "3I0W7vY7k"
          },
          "query": "server2_vol1_total=from(bucket: \"Test/autogen\")\r\n  |> range(start: -5m, stop: now())\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_raid\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"raid_total_size\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> filter(fn: (r) => r[\"raid_name\"] == \"Volume2\")\r\n  |> aggregateWindow(every: 1h, fn: last)\r\n  |> rename(columns: {_value: \"total_size\"})\r\n\r\nserver2_vol1_free=from(bucket: \"Test/autogen\")\r\n  |> range(start: -5m, stop: now())\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_raid\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"raid_free_size\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> filter(fn: (r) => r[\"raid_name\"] == \"Volume2\")\r\n  |> aggregateWindow(every: 1h, fn: last)\r\n  |> rename(columns: {_value: \"vol_free\"})\r\n\r\n////////////////////////////////////////////////\r\n//COMBINE ALL TABLES INTO ONE TABLE\r\n////////////////////////////////////////////////\r\n\r\noverview = union(tables: [server2_vol1_total, server2_vol1_free])\r\n|> group(columns: [\"_time\"], mode:\"by\")\r\n|> fill(column: \"total_size\", value: 0.0)\r\n|> fill(column: \"vol_free\", value: 0.0)\r\n|> reduce(\r\n       fn: (r, accumulator) => ({\r\n          total_size: r.total_size + accumulator.total_size,\r\n          vol_free: r.vol_free + accumulator.vol_free\r\n         }),\r\n        identity: {total_size: 0.0, vol_free: 0.0},\r\n    )\r\n|> map(fn: (r) => ({ r with _value: (r.total_size - r.vol_free) }))\r\n|> drop(columns: [\"_time\"])\r\n|> rename(columns: {_value: \"Used\"})\r\n|> rename(columns: {total_size: \"Total\"})\r\n|> rename(columns: {vol_free: \"Free\"})\r\n|> yield()\r\n",
          "refId": "A"
        }
      ],
      "title": "Server2 - Volume 2",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {
              "Free": 1,
              "Total": 0,
              "Used": 2
            },
            "renameByName": {}
          }
        },
        {
          "id": "reduce",
          "options": {
            "labelsToFields": false,
            "reducers": [
              "last"
            ]
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "3I0W7vY7k"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 2,
          "mappings": [],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "dark-yellow",
                "value": 66
              },
              {
                "color": "dark-orange",
                "value": 75
              },
              {
                "color": "light-red",
                "value": 90
              },
              {
                "color": "red",
                "value": 95
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 8,
        "x": 8,
        "y": 4
      },
      "id": 6,
      "options": {
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true
      },
      "pluginVersion": "9.1.3",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "3I0W7vY7k"
          },
          "query": "////////////////////////////////////////////////\r\n//TOTAL AVAILABLE SPACE ON THE DIFFERENT VOLUMES\r\n////////////////////////////////////////////////\r\nserver2_vol1_total=from(bucket: \"Test/autogen\")\r\n  |> range(start: -5m, stop: now())\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_volume\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"vol_totalsize\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> filter(fn: (r) => r[\"volume\"] == \"/volume1\")\r\n  |> last()\r\n  |> limit(n: 1)\r\n  |> rename(columns: {_value: \"total_size\"})\r\n\r\nserver2_vol2_total=from(bucket: \"Test/autogen\")\r\n  |> range(start: -5m, stop: now())\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_volume\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"vol_totalsize\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> filter(fn: (r) => r[\"volume\"] == \"/volume2\")\r\n  |> last()\r\n  |> limit(n: 1)\r\n  |> rename(columns: {_value: \"total_size\"})\r\n\r\n\r\n////////////////////////////////////////////////\r\n//USED SPACE ON THE DIFFERENT VOLUMES\r\n////////////////////////////////////////////////\r\n\r\nserver2_vol1_used=from(bucket: \"Test/autogen\")\r\n  |> range(start: -5m, stop: now())\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_volume\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"vol_used\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> filter(fn: (r) => r[\"volume\"] == \"/volume1\")\r\n  |> last()\r\n  |> limit(n: 1)\r\n  |> rename(columns: {_value: \"vol_used\"})\r\n\r\nserver2_vol2_used=from(bucket: \"Test/autogen\")\r\n  |> range(start: -5m, stop: now())\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_volume\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"vol_used\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> filter(fn: (r) => r[\"volume\"] == \"/volume2\")\r\n  |> last()\r\n  |> limit(n: 1)\r\n  |> rename(columns: {_value: \"vol_used\"})\r\n\r\n\r\n////////////////////////////////////////////////\r\n//COMBINE ALL TABLES INTO ONE TABLE\r\n////////////////////////////////////////////////\r\n\r\noverview = union(tables: [server2_vol1_total, server2_vol2_total,server2_vol1_used, server2_vol2_used])\r\n|> group(columns: [\"_time\"], mode:\"by\")\r\n|> fill(column: \"total_size\", value: 0.0)\r\n|> fill(column: \"vol_used\", value: 0.0)\r\n|> reduce(\r\n       fn: (r, accumulator) => ({\r\n          total_size: r.total_size + accumulator.total_size,\r\n          total_used: r.vol_used + accumulator.total_used\r\n         }),\r\n        identity: {total_size: 0.0, total_used: 0.0},\r\n    )\r\n|> map(fn: (r) => ({ r with _value: (r.total_used / r.total_size)*100.0 }))\r\n|> drop(columns: [\"total_size\", \"total_used\", \"_time\"])\r\n|> rename(columns: {_value: \"% Space Used\"})\r\n|> yield()",
          "refId": "A"
        }
      ],
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "3I0W7vY7k"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 2,
          "mappings": [],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "dark-yellow",
                "value": 66
              },
              {
                "color": "dark-orange",
                "value": 75
              },
              {
                "color": "light-red",
                "value": 90
              },
              {
                "color": "red",
                "value": 95
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 4,
        "x": 16,
        "y": 6
      },
      "id": 20,
      "options": {
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true
      },
      "pluginVersion": "9.1.3",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "3I0W7vY7k"
          },
          "query": "////////////////////////////////////////////////\r\n//TOTAL AVAILABLE SPACE ON THE DIFFERENT VOLUMES\r\n////////////////////////////////////////////////\r\nserver2_vol2_total=from(bucket: \"Test/autogen\")\r\n  |> range(start: -5m, stop: now())\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_volume\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"vol_totalsize\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> filter(fn: (r) => r[\"volume\"] == \"/volume1\")\r\n  |> aggregateWindow(every: 1h, fn: first)\r\n  |> rename(columns: {_value: \"total_size\"})\r\n\r\n////////////////////////////////////////////////\r\n//USED SPACE ON THE DIFFERENT VOLUMES\r\n////////////////////////////////////////////////\r\n\r\nserver2_vol2_used=from(bucket: \"Test/autogen\")\r\n  |> range(start: -5m, stop: now())\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_volume\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"vol_used\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> filter(fn: (r) => r[\"volume\"] == \"/volume1\")\r\n  |> aggregateWindow(every: 1h, fn: first)\r\n  |> rename(columns: {_value: \"vol_used\"})\r\n\r\n////////////////////////////////////////////////\r\n//COMBINE ALL TABLES INTO ONE TABLE\r\n////////////////////////////////////////////////\r\n\r\noverview = union(tables: [server2_vol2_total, server2_vol2_used])\r\n|> group(columns: [\"_time\"], mode:\"by\")\r\n|> fill(column: \"total_size\", value: 0.0)\r\n|> fill(column: \"vol_used\", value: 0.0)\r\n|> reduce(\r\n       fn: (r, accumulator) => ({\r\n          total_size: r.total_size + accumulator.total_size,\r\n          total_used: r.vol_used + accumulator.total_used\r\n         }),\r\n        identity: {total_size: 0.0, total_used: 0.0},\r\n    )\r\n|> map(fn: (r) => ({ r with _value: (r.total_used / r.total_size)*100.0 }))\r\n|> drop(columns: [\"total_size\", \"total_used\", \"_time\"])\r\n|> rename(columns: {_value: \"% Space Used\"})\r\n|> yield()\r\n\r\n",
          "refId": "A"
        }
      ],
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "3I0W7vY7k"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 2,
          "mappings": [],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "dark-yellow",
                "value": 66
              },
              {
                "color": "dark-orange",
                "value": 75
              },
              {
                "color": "light-red",
                "value": 90
              },
              {
                "color": "red",
                "value": 95
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 4,
        "x": 20,
        "y": 6
      },
      "id": 19,
      "options": {
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true
      },
      "pluginVersion": "9.1.3",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "3I0W7vY7k"
          },
          "query": "////////////////////////////////////////////////\r\n//TOTAL AVAILABLE SPACE ON THE DIFFERENT VOLUMES\r\n////////////////////////////////////////////////\r\nserver2_vol2_total=from(bucket: \"Test/autogen\")\r\n  |> range(start: -5m, stop: now())\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_volume\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"vol_totalsize\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> filter(fn: (r) => r[\"volume\"] == \"/volume2\")\r\n  |> aggregateWindow(every: 1h, fn: first)\r\n  |> rename(columns: {_value: \"total_size\"})\r\n\r\n////////////////////////////////////////////////\r\n//USED SPACE ON THE DIFFERENT VOLUMES\r\n////////////////////////////////////////////////\r\n\r\nserver2_vol2_used=from(bucket: \"Test/autogen\")\r\n  |> range(start: -5m, stop: now())\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_volume\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"vol_used\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> filter(fn: (r) => r[\"volume\"] == \"/volume2\")\r\n  |> aggregateWindow(every: 1h, fn: first)\r\n  |> rename(columns: {_value: \"vol_used\"})\r\n\r\n////////////////////////////////////////////////\r\n//COMBINE ALL TABLES INTO ONE TABLE\r\n////////////////////////////////////////////////\r\n\r\noverview = union(tables: [server2_vol2_total, server2_vol2_used])\r\n|> group(columns: [\"_time\"], mode:\"by\")\r\n|> fill(column: \"total_size\", value: 0.0)\r\n|> fill(column: \"vol_used\", value: 0.0)\r\n|> reduce(\r\n       fn: (r, accumulator) => ({\r\n          total_size: r.total_size + accumulator.total_size,\r\n          total_used: r.vol_used + accumulator.total_used\r\n         }),\r\n        identity: {total_size: 0.0, total_used: 0.0},\r\n    )\r\n|> map(fn: (r) => ({ r with _value: (r.total_used / r.total_size)*100.0 }))\r\n|> drop(columns: [\"total_size\", \"total_used\", \"_time\"])\r\n|> rename(columns: {_value: \"% Space Used\"})\r\n|> yield()\r\n\r\n",
          "refId": "A"
        }
      ],
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "3I0W7vY7k"
      },
      "gridPos": {
        "h": 5,
        "w": 8,
        "x": 8,
        "y": 7
      },
      "id": 18,
      "options": {
        "content": "",
        "mode": "markdown"
      },
      "pluginVersion": "9.1.3",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {
              "Free": 1,
              "Total": 0,
              "Used": 2
            },
            "renameByName": {}
          }
        },
        {
          "id": "reduce",
          "options": {
            "labelsToFields": false,
            "reducers": [
              "last"
            ]
          }
        }
      ],
      "type": "text"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "3I0W7vY7k"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [
            {
              "options": {
                "0": {
                  "color": "dark-red",
                  "index": 0,
                  "text": "OFFLINE"
                },
                "1": {
                  "color": "dark-green",
                  "index": 1,
                  "text": "ONLINE"
                }
              },
              "type": "value"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-red",
                "value": null
              },
              {
                "color": "dark-green",
                "value": 1
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 0,
        "y": 12
      },
      "id": 21,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "9.1.3",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "3I0W7vY7k"
          },
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: -5m, stop: now())\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_system\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"system_status\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> last()\r\n  |> limit(n: 1)\r\n  |> drop(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"_time\", \"nas_name\"])\r\n  |> rename(columns: {_value: \"Status\"})",
          "refId": "A"
        }
      ],
      "title": "System Status",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "3I0W7vY7k"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [
            {
              "options": {
                "0": {
                  "color": "dark-red",
                  "index": 0,
                  "text": "OFFLINE"
                },
                "1": {
                  "color": "dark-green",
                  "index": 1,
                  "text": "ONLINE"
                }
              },
              "type": "value"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-red",
                "value": null
              },
              {
                "color": "dark-green",
                "value": 1
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 3,
        "y": 12
      },
      "id": 39,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "9.1.3",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "3I0W7vY7k"
          },
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: -5m, stop: now())\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_system\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"fan_status\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> last()\r\n  |> limit(n: 1)\r\n  |> drop(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"_time\", \"nas_name\"])\r\n  |> rename(columns: {_value: \"Status\"})",
          "refId": "A"
        }
      ],
      "title": "System Fan Status",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "3I0W7vY7k"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [
            {
              "options": {
                "0": {
                  "color": "dark-red",
                  "index": 0,
                  "text": "OFFLINE"
                },
                "1": {
                  "color": "dark-green",
                  "index": 1,
                  "text": "ONLINE"
                }
              },
              "type": "value"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-red",
                "value": null
              },
              {
                "color": "dark-green",
                "value": 1
              }
            ]
          },
          "unit": "dtdhms"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 6,
        "y": 12
      },
      "id": 23,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "9.1.3",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "3I0W7vY7k"
          },
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: -5m, stop: now())\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_system\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"uptime\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> map(fn: (r) => ({ r with _value: r._value / 100.0 }))\r\n  |> last()\r\n  |> limit(n: 1)\r\n  |> drop(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"_time\", \"nas_name\"])\r\n  |> rename(columns: {_value: \"Uptime\"})",
          "refId": "A"
        }
      ],
      "title": "System Uptine",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "3I0W7vY7k"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [
            {
              "options": {
                "0": {
                  "color": "dark-green",
                  "index": 0,
                  "text": "OFFLINE"
                },
                "1": {
                  "color": "dark-green",
                  "index": 1,
                  "text": "ONLINE"
                }
              },
              "type": "value"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-green",
                "value": null
              },
              {
                "color": "dark-green",
                "value": 1
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 9,
        "y": 12
      },
      "id": 24,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [],
          "fields": "/^dsm_version Server2$/",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "9.1.3",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "3I0W7vY7k"
          },
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: -5m, stop: now())\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_system\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"dsm_version\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> last()\r\n  |> limit(n: 1)\r\n // |> drop(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"_time\", \"nas_name\"])\r\n // |> rename(columns: {_value: \"Status\"})",
          "refId": "A"
        }
      ],
      "title": "DSM Version",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "3I0W7vY7k"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [
            {
              "options": {
                "1": {
                  "color": "yellow",
                  "index": 0,
                  "text": "Update Available"
                },
                "2": {
                  "color": "dark-green",
                  "index": 1,
                  "text": "System Up To Date"
                },
                "3": {
                  "color": "dark-orange",
                  "index": 2,
                  "text": "Connecting"
                },
                "4": {
                  "color": "dark-red",
                  "index": 3,
                  "text": "Disconnected"
                },
                "5": {
                  "color": "dark-red",
                  "index": 4,
                  "text": "Other"
                }
              },
              "type": "value"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-green",
                "value": null
              },
              {
                "color": "dark-green",
                "value": 1
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 3,
        "x": 12,
        "y": 12
      },
      "id": 25,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {
          "valueSize": 12
        },
        "textMode": "auto"
      },
      "pluginVersion": "9.1.3",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "3I0W7vY7k"
          },
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: -5m, stop: now())\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_system\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"upgrade_status\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> last()\r\n  |> limit(n: 1)\r\n  |> drop(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"_time\", \"nas_name\"])\r\n  |> rename(columns: {_value: \" \"})",
          "refId": "A"
        }
      ],
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "MqivmMY7z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 11,
        "w": 24,
        "x": 0,
        "y": 14
      },
      "id": 27,
      "maxDataPoints": 2000,
      "options": {
        "legend": {
          "calcs": [
            "min",
            "max",
            "last"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "8.5.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "query": "////////////////////////////////////////////////\r\n//Memory Used Calculation\r\n////////////////////////////////////////////////\r\nmem_avail_real=from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_memory\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"mem_avail_real\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\r\n  //|> rename(columns: {_value: \"mem_avail_real\"})\r\n\r\nmem_total=from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_memory\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"mem_total\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\r\n  //|> rename(columns: {_value: \"mem_total\"})\r\n\r\nmem_buffer=from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_memory\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"mem_buffer\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\r\n  //|> rename(columns: {_value: \"mem_buffer\"})\r\n\r\nmem_cached=from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_memory\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"mem_cached\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\r\n  //|> rename(columns: {_value: \"mem_cached\"})\r\n\r\n\r\n////////////////////////////////////////////////\r\n//COMBINE ALL TABLES INTO ONE TABLE\r\n////////////////////////////////////////////////\r\n\r\noverview = union(tables: [mem_avail_real, mem_total, mem_cached, mem_buffer])\r\n|> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n|> map(fn: (r) => ({ r with _value: ((r.mem_total-r.mem_avail_real-r.mem_buffer-r.mem_cached)/r.mem_total) * 100.0 }))\r\n|> drop(columns: [\"mem_avail_real\", \"mem_buffer\", \"mem_cached\", \"mem_total\", \"_start\", \"_stop\", \"nas_name\", \"_measurement\"])\r\n|> rename(columns: {_value: \"Server 2\"})\r\n|> yield()\r\n",
          "refId": "A"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_gpu\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"gpuMemoryUsed\" or r[\"_field\"] == \"gpuMemoryTotal\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server_NVR\")\r\n|> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n   |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n   |> map(fn: (r) => ({r with _value: (r.gpuMemoryUsed / r.gpuMemoryTotal) * 100.0}))\r\n     |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"gpuMemoryTotal\", \"gpuMemoryUsed\"])\r\n|> rename(columns: {_value: \"Server_NVR GPU\"})\r\n  |> yield()",
          "refId": "D"
        }
      ],
      "title": "Memory Utilization",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "MqivmMY7z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "opacity",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Server_NVR_GPU"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-orange",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 11,
        "w": 24,
        "x": 0,
        "y": 25
      },
      "id": 54,
      "maxDataPoints": 6000,
      "options": {
        "legend": {
          "calcs": [
            "min",
            "max",
            "last"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "8.5.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_cpu\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"cpu_usage\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server_NVR\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n  |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\"])\r\n|> rename(columns: {_value: \"Server_NVR_CPU\"})\r\n  |> yield()",
          "refId": "C"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_gpu\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"gpu_utilization\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server_NVR\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n  |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\"])\r\n|> rename(columns: {_value: \"Server_NVR_GPU\"})\r\n  |> yield()",
          "refId": "D"
        }
      ],
      "title": "CPU/GPU Utilization",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "MqivmMY7z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "System (Left)    HDD (Right)",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "opacity",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 1,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "fahrenheit"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Disk1"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Disk2"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Disk3"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Disk4"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Disk1(DX517-1)"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Disk2(DX517-1)"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Disk3(DX517-1)"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Disk4(DX517-1)"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Disk5(DX517-1)"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 11,
        "w": 24,
        "x": 0,
        "y": 36
      },
      "id": 55,
      "maxDataPoints": 2000,
      "options": {
        "legend": {
          "calcs": [
            "min",
            "max",
            "last"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "8.5.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_system\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"system_temp\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: (r._value*(9.0/5.0))+32.0 }))\r\n  |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\"])\r\n|> rename(columns: {_value: \"CPU\"})\r\n  |> yield()",
          "refId": "A"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_disk\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"disk_temp\")\r\n  |> filter(fn: (r) => r[\"disk_name\"] == \"Disk1\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: (r._value*(9.0/5.0))+32.0 }))\r\n  |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"disk_name\"])\r\n|> rename(columns: {_value: \"Disk1\"})\r\n  |> yield()",
          "refId": "B"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_disk\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"disk_temp\")\r\n  |> filter(fn: (r) => r[\"disk_name\"] == \"Disk2\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: (r._value*(9.0/5.0))+32.0 }))\r\n  |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"disk_name\"])\r\n|> rename(columns: {_value: \"Disk2\"})\r\n  |> yield()",
          "refId": "C"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_disk\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"disk_temp\")\r\n  |> filter(fn: (r) => r[\"disk_name\"] == \"Disk3\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: (r._value*(9.0/5.0))+32.0 }))\r\n  |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"disk_name\"])\r\n|> rename(columns: {_value: \"Disk3\"})\r\n  |> yield()",
          "refId": "D"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_disk\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"disk_temp\")\r\n  |> filter(fn: (r) => r[\"disk_name\"] == \"Disk4\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: (r._value*(9.0/5.0))+32.0 }))\r\n  |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"disk_name\"])\r\n|> rename(columns: {_value: \"Disk4\"})\r\n  |> yield()",
          "refId": "E"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_disk\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"disk_temp\")\r\n  |> filter(fn: (r) => r[\"disk_name\"] == \"Disk1(DX517-1)\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: (r._value*(9.0/5.0))+32.0 }))\r\n  |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"disk_name\"])\r\n|> rename(columns: {_value: \"Disk1(DX517-1)\"})\r\n  |> yield()",
          "refId": "F"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_disk\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"disk_temp\")\r\n  |> filter(fn: (r) => r[\"disk_name\"] == \"Disk2(DX517-1)\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: (r._value*(9.0/5.0))+32.0 }))\r\n  |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"disk_name\"])\r\n|> rename(columns: {_value: \"Disk2(DX517-1)\"})\r\n  |> yield()",
          "refId": "G"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_disk\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"disk_temp\")\r\n  |> filter(fn: (r) => r[\"disk_name\"] == \"Disk3(DX517-1)\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: (r._value*(9.0/5.0))+32.0 }))\r\n  |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"disk_name\"])\r\n|> rename(columns: {_value: \"Disk3(DX517-1)\"})\r\n  |> yield()",
          "refId": "H"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_disk\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"disk_temp\")\r\n  |> filter(fn: (r) => r[\"disk_name\"] == \"Disk4(DX517-1)\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: (r._value*(9.0/5.0))+32.0 }))\r\n  |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"disk_name\"])\r\n|> rename(columns: {_value: \"Disk4(DX517-1)\"})\r\n  |> yield()",
          "refId": "I"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_disk\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"disk_temp\")\r\n  |> filter(fn: (r) => r[\"disk_name\"] == \"Disk5(DX517-1)\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: (r._value*(9.0/5.0))+32.0 }))\r\n  |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"disk_name\"])\r\n|> rename(columns: {_value: \"Disk5(DX517-1)\"})\r\n  |> yield()",
          "refId": "J"
        }
      ],
      "title": "Server 2 System Temperatures",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "MqivmMY7z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "opacity",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 1,
          "mappings": [],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 11,
        "w": 24,
        "x": 0,
        "y": 47
      },
      "id": 59,
      "maxDataPoints": 2000,
      "options": {
        "legend": {
          "calcs": [
            "min",
            "max",
            "last"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "8.5.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_disk\")\r\n  |> filter(fn: (r) => r[\"disk_path\"] == \"/dev/sata1\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"disk_load\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n    |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"disk_path\"])\r\n|> rename(columns: {_value: \"Vol1 Disk 1\"})\r\n  |> yield()",
          "refId": "A"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_disk\")\r\n  |> filter(fn: (r) => r[\"disk_path\"] == \"/dev/sata2\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"disk_load\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n    |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"disk_path\"])\r\n|> rename(columns: {_value: \"Vol1 Disk 2\"})\r\n  |> yield()",
          "refId": "B"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_disk\")\r\n  |> filter(fn: (r) => r[\"disk_path\"] == \"/dev/sata3\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"disk_load\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n    |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"disk_path\"])\r\n|> rename(columns: {_value: \"Vol1 Disk 3\"})\r\n  |> yield()",
          "refId": "C"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_disk\")\r\n  |> filter(fn: (r) => r[\"disk_path\"] == \"/dev/sata4\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"disk_load\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n    |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"disk_path\"])\r\n|> rename(columns: {_value: \"Vol1 Disk 4\"})\r\n  |> yield()",
          "refId": "D"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_disk\")\r\n  |> filter(fn: (r) => r[\"disk_path\"] == \"/dev/sata5\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"disk_load\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n    |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"disk_path\"])\r\n|> rename(columns: {_value: \"Vol2 Disk 1\"})\r\n  |> yield()",
          "refId": "E"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_disk\")\r\n  |> filter(fn: (r) => r[\"disk_path\"] == \"/dev/sata6\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"disk_load\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n    |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"disk_path\"])\r\n|> rename(columns: {_value: \"Vol2 Disk 2\"})\r\n  |> yield()",
          "refId": "F"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_disk\")\r\n  |> filter(fn: (r) => r[\"disk_path\"] == \"/dev/sata7\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"disk_load\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n    |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"disk_path\"])\r\n|> rename(columns: {_value: \"Vol2 Disk 3\"})\r\n  |> yield()",
          "refId": "G"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_disk\")\r\n  |> filter(fn: (r) => r[\"disk_path\"] == \"/dev/sata8\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"disk_load\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n    |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"disk_path\"])\r\n|> rename(columns: {_value: \"Vol2 Disk 4\"})\r\n  |> yield()",
          "refId": "H"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_disk\")\r\n  |> filter(fn: (r) => r[\"disk_path\"] == \"/dev/sata9\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"disk_load\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n    |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"disk_path\"])\r\n|> rename(columns: {_value: \"Vol2 Disk 5\"})\r\n  |> yield()",
          "refId": "I"
        }
      ],
      "title": "Server2 Disk Usage",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "MqivmMY7z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "opacity",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 1,
          "mappings": [],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 11,
        "w": 24,
        "x": 0,
        "y": 58
      },
      "id": 62,
      "maxDataPoints": 2000,
      "options": {
        "legend": {
          "calcs": [
            "min",
            "max",
            "last"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "8.5.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_volume\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"volume_load\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> filter(fn: (r) => r[\"volume_path\"] == \"md2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n      |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"volume_path\"])\r\n|> rename(columns: {_value: \"Server2 - Volume1 Load\"})\r\n  |> yield()",
          "refId": "A"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_volume\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"volume_load\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> filter(fn: (r) => r[\"volume_path\"] == \"md3\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n      |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"volume_path\"])\r\n|> rename(columns: {_value: \"Server2 - Volume2 Load\"})\r\n  |> yield()",
          "refId": "B"
        }
      ],
      "title": "Server2   ----    Volume Usage",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "MqivmMY7z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "READ (Left)    WRITE (Right}",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "opacity",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 1,
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "binBps"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Volume1 WRITE"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Volume2 WRITE"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 11,
        "w": 24,
        "x": 0,
        "y": 69
      },
      "id": 63,
      "maxDataPoints": 2000,
      "options": {
        "legend": {
          "calcs": [
            "min",
            "max",
            "last"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "8.5.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_volume\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"volume_reads\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> filter(fn: (r) => r[\"volume_path\"] == \"md2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n      |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"volume_path\"])\r\n  |> derivative(\r\n    unit: 1s,\r\n    nonNegative: true,\r\n    columns: [\"_value\"],\r\n    timeColumn: \"_time\",\r\n)\r\n|> rename(columns: {_value: \"Volume1 READ\"})\r\n  |> yield()",
          "refId": "A"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_volume\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"volume_reads\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> filter(fn: (r) => r[\"volume_path\"] == \"md3\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n      |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"volume_path\"])\r\n  |> derivative(\r\n    unit: 1s,\r\n    nonNegative: true,\r\n    columns: [\"_value\"],\r\n    timeColumn: \"_time\",\r\n)\r\n|> rename(columns: {_value: \"Volume2 READ\"})\r\n  |> yield()",
          "refId": "B"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_volume\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"volume_writes\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> filter(fn: (r) => r[\"volume_path\"] == \"md2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n      |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"volume_path\"])\r\n  |> derivative(\r\n    unit: 1s,\r\n    nonNegative: true,\r\n    columns: [\"_value\"],\r\n    timeColumn: \"_time\",\r\n)\r\n|> rename(columns: {_value: \"Volume1 WRITE\"})\r\n  |> yield()",
          "refId": "C"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_volume\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"volume_writes\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n  |> filter(fn: (r) => r[\"volume_path\"] == \"md3\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n      |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"volume_path\"])\r\n  |> derivative(\r\n    unit: 1s,\r\n    nonNegative: true,\r\n    columns: [\"_value\"],\r\n    timeColumn: \"_time\",\r\n)\r\n|> rename(columns: {_value: \"Volume2 WRITE\"})\r\n  |> yield()",
          "refId": "D"
        }
      ],
      "title": "Server2 Volume Activity",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "MqivmMY7z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "Received (Left)    Sent(Right}",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "opacity",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 1,
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "binBps"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "LAN1 Sent (VLAN 101)"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "LAN2 Sent (VLAN 1)"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 11,
        "w": 24,
        "x": 0,
        "y": 80
      },
      "id": 66,
      "maxDataPoints": 2000,
      "options": {
        "legend": {
          "calcs": [
            "min",
            "max",
            "last"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "8.5.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_network\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"bytes_recv\")\r\n  |> filter(fn: (r) => r[\"interface_name\"] == \"eth0\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n|> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n      |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"interface_name\"])\r\n  |> derivative(\r\n    unit: 1s,\r\n    nonNegative: true,\r\n    columns: [\"_value\"],\r\n    timeColumn: \"_time\",\r\n)\r\n|> rename(columns: {_value: \"LAN1 Received (VLAN 101)\"})\r\n  |> yield()",
          "refId": "A"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_network\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"bytes_recv\")\r\n  |> filter(fn: (r) => r[\"interface_name\"] == \"eth1\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n|> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n      |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"interface_name\"])\r\n  |> derivative(\r\n    unit: 1s,\r\n    nonNegative: true,\r\n    columns: [\"_value\"],\r\n    timeColumn: \"_time\",\r\n)\r\n|> rename(columns: {_value: \"LAN2 Received (VLAN 1)\"})\r\n  |> yield()",
          "refId": "B"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_network\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"bytes_sent\")\r\n  |> filter(fn: (r) => r[\"interface_name\"] == \"eth0\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n|> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n      |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"interface_name\"])\r\n  |> derivative(\r\n    unit: 1s,\r\n    nonNegative: true,\r\n    columns: [\"_value\"],\r\n    timeColumn: \"_time\",\r\n)\r\n|> rename(columns: {_value: \"LAN1 Sent (VLAN 101)\"})\r\n  |> yield()",
          "refId": "C"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_network\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"bytes_sent\")\r\n  |> filter(fn: (r) => r[\"interface_name\"] == \"eth1\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server2\")\r\n|> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n      |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\", \"interface_name\"])\r\n  |> derivative(\r\n    unit: 1s,\r\n    nonNegative: true,\r\n    columns: [\"_value\"],\r\n    timeColumn: \"_time\",\r\n)\r\n|> rename(columns: {_value: \"LAN2 Sent (VLAN 1)\"})\r\n  |> yield()",
          "refId": "D"
        }
      ],
      "title": "Server 2 - Network Activity",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "MqivmMY7z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "FAN Speed Command",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "opacity",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 1,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 11,
        "w": 24,
        "x": 0,
        "y": 91
      },
      "id": 69,
      "maxDataPoints": 2000,
      "options": {
        "legend": {
          "calcs": [
            "min",
            "max",
            "last"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "8.5.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "MqivmMY7z"
          },
          "hide": false,
          "query": "from(bucket: \"Test/autogen\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synology_gpu\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"gpuFanSpeed\")\r\n  |> filter(fn: (r) => r[\"nas_name\"] == \"Server_NVR\")\r\n|> aggregateWindow(every: v.windowPeriod, fn: distinct, createEmpty: false)\r\n  |> drop(columns: [\"_start\", \"_stop\", \"nas_name\", \"_measurement\", \"_field\"])\r\n|> rename(columns: {_value: \"GPU Fan Speed Command\"})\r\n  |> yield()",
          "refId": "A"
        }
      ],
      "title": "Server NVR - GPU Fan Speed",
      "type": "timeseries"
    }
  ],
  "refresh": false,
  "schemaVersion": 37,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now-24h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Synology_SNMP",
  "uid": "KVBPQoG4z",
  "version": 2,
  "weekStart": ""
}